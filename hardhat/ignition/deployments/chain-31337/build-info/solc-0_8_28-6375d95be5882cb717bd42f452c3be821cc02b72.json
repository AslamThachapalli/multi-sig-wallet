{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-6375d95be5882cb717bd42f452c3be821cc02b72",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/MultiSigWallet.sol": "project/contracts/MultiSigWallet.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/MultiSigWallet.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\ncontract MultiSigWallet {\n    event Deposit(address indexed sender, uint256 amount, uint256 balance);\n    event SubmitTransaction(\n        address indexed owner,\n        uint256 indexed txIndex,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n    event ConfirmTransaction(address indexed owner, uint256 indexed txIndex);\n    event RevokeConfirmation(address indexed owner, uint256 indexed txIndex);\n    event ExcecuteTransaction(address indexed owner, uint256 indexed txIndex);\n    event OwnerAdded(address indexed newOwner);\n    event OwnerRemoved(address indexed removedOwner);\n\n    address[] public owners;\n    mapping(address => bool) public isOwner;\n    uint256 public numConfirmationsRequired;\n\n    struct Transaction {\n        address to;\n        uint256 value;\n        bytes data;\n        bool executed;\n        uint256 numConfirmations;\n    }\n\n    // mapping from tx index => owner => bool\n    mapping(uint256 => mapping(address => bool)) public isConfirmed;\n\n    Transaction[] public transactions;\n\n    modifier onlyOwner() {\n        require(isOwner[msg.sender], \"not owner\");\n        _;\n    }\n\n    modifier txExists(uint256 _txIndex) {\n        require(_txIndex < transactions.length, \"tx does not exist\");\n        _;\n    }\n\n    modifier notExecuted(uint256 _txIndex) {\n        require(!transactions[_txIndex].executed, \"tx already executed\");\n        _;\n    }\n\n    modifier notConfirmed(uint256 _txIndex) {\n        require(!isConfirmed[_txIndex][msg.sender], \"tx already confirmed\");\n        _;\n    }\n\n    constructor(address[] memory _owners, uint256 _numConfirmationsRequired) {\n        require(_owners.length > 0, \"Owners required\");\n        require(\n            _numConfirmationsRequired > 0 &&\n                _numConfirmationsRequired <= _owners.length,\n            \"invalid number of required confirmations.\"\n        );\n\n        for (uint256 i = 0; i < _owners.length; i++) {\n            address owner = _owners[i];\n\n            require(owner != address(0), \"Invalid owner\");\n            require(!isOwner[owner], \"Owner not unique\");\n\n            isOwner[owner] = true;\n            owners.push(owner);\n        }\n\n        numConfirmationsRequired = _numConfirmationsRequired;\n    }\n\n    receive() external payable {\n        emit Deposit(msg.sender, msg.value, address(this).balance);\n    }\n\n    function submitTransaction(\n        address _to,\n        uint256 _value,\n        bytes memory _data\n    ) public onlyOwner {\n        uint256 txIndex = transactions.length;\n\n        transactions.push(\n            Transaction({\n                to: _to,\n                value: _value,\n                data: _data,\n                executed: false,\n                numConfirmations: 0\n            })\n        );\n\n        emit SubmitTransaction(msg.sender, txIndex, _to, _value, _data);\n    }\n\n    function confirmTransaction(\n        uint256 _txIndex\n    )\n        public\n        onlyOwner\n        txExists(_txIndex)\n        notExecuted(_txIndex)\n        notConfirmed(_txIndex)\n    {\n        Transaction storage transaction = transactions[_txIndex];\n        transaction.numConfirmations += 1;\n        isConfirmed[_txIndex][msg.sender] = true;\n\n        emit ConfirmTransaction(msg.sender, _txIndex);\n    }\n\n    function executeTransaction(\n        uint256 _txIndex\n    ) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) {\n        Transaction storage transaction = transactions[_txIndex];\n\n        require(\n            transaction.numConfirmations >= numConfirmationsRequired,\n            \"cannot execute tx\"\n        );\n\n        transaction.executed = true;\n\n        (bool success, ) = transaction.to.call{value: transaction.value}(\n            transaction.data\n        );\n        require(success, \"tx failed\");\n\n        emit ExcecuteTransaction(msg.sender, _txIndex);\n    }\n\n    function revokeConfirmation(\n        uint256 _txIndex\n    ) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) {\n        Transaction storage transaction = transactions[_txIndex];\n\n        require(isConfirmed[_txIndex][msg.sender], \"tx not confirmed\");\n\n        transaction.numConfirmations -= 1;\n        isConfirmed[_txIndex][msg.sender] = false;\n\n        emit RevokeConfirmation(msg.sender, _txIndex);\n    }\n\n    function getTransactionCount() public view returns (uint256) {\n        return transactions.length;\n    }\n\n    function getTransaction(\n        uint256 _txIndex\n    )\n        public\n        view\n        returns (\n            address to,\n            uint256 value,\n            bytes memory data,\n            bool executed,\n            uint256 numConfirmations\n        )\n    {\n        Transaction storage transaction = transactions[_txIndex];\n\n        return (\n            transaction.to,\n            transaction.value,\n            transaction.data,\n            transaction.executed,\n            transaction.numConfirmations\n        );\n    }\n\n    function addOwner(address _owner) public {\n        require(msg.sender == address(this), \"tx must come from wallet\");\n        require(_owner != address(0), \"Invalid owner\");\n        require(!isOwner[_owner], \"owner not unique\");\n\n        isOwner[_owner] = true;\n        owners.push(_owner);\n\n        emit OwnerAdded(_owner);\n    }\n\n    function removeOwner(address _owner) public {\n        require(msg.sender == address(this), \"tx must come from wallet\");\n        require(isOwner[_owner], \"address in not owner\");\n        require(\n            owners.length - 1 >= numConfirmationsRequired,\n            \"minimum owners required\"\n        );\n\n        bool found = false;\n        uint256 index;\n        for (uint256 i = 0; i < owners.length; i++) {\n            if (owners[i] == _owner) {\n                index = i;\n                found = true;\n                break;\n            }\n        }\n\n        require(found, \"owner not found\");\n\n        isOwner[_owner] = false;\n        owners[index] = owners[owners.length - 1];\n        owners.pop();\n\n        emit OwnerRemoved(_owner);\n    }\n}\n"
      }
    }
  }
}